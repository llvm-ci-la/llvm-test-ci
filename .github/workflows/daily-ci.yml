name: Daily LLVM test

on:
  workflow_dispatch:
  schedule:
    - cron: '5 16 * * *'

permissions:
  issues: write
  contents: read

env:
  WORKSPACE:              ${{ github.workspace }}
  LLVM_SOURCE_DIR:        ${{ github.workspace }}/repos/llvm-project
  TEST_SUITE_SOURCE_DIR:  ${{ github.workspace }}/repos/llvm-test-suite
  CPU2017_DIR:            ${{ github.workspace }}/repos/cpu2017
  CPU2006_DIR:            ${{ github.workspace }}/repos/cpu2006
  BUILDS_DIR:             ${{ github.workspace }}/build-daily
  LOG_FILE:               ${{ github.workspace }}/build-daily/daily-ci.log
  FAILED_TESTS:           ${{ github.workspace }}/build-daily/failed-tests.txt

jobs:
  configure:
    runs-on: [self-hosted, buildbot]
    steps:
      - uses: actions/checkout@v4
        with:
          clean: false

      - name: Cleanup old builds
        run: |
          if [ -d "${BUILDS_DIR}" ]; then
            rm -rf ${BUILDS_DIR}/*
          else
            mkdir -p ${BUILDS_DIR}
          fi

      - name: Update repos
        run: |
          cd ${WORKSPACE}
          sh scripts/fetch-upstream.sh 2>&1 | tee -a ${LOG_FILE}
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Update repos failed! Check logs."
            exit 1
          fi
  
  llvm:
    needs: configure
    runs-on: self-hosted
    steps:
      - name: Build LLVM Release mode
        run: |
          cd ${WORKSPACE}
          sh scripts/build-llvm-release.sh 2>&1 | tee -a ${LOG_FILE}
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Build LLVM failed! Check logs."
            exit 1
          fi


      - name: Run LLVM tests
        run: |
          cd ${BUILDS_DIR}/build-llvm
          ./bin/llvm-lit test -v 2>&1 | tee -a ${LOG_FILE}

  test-suite:
    needs: llvm
    runs-on: self-hosted
    steps:
      - name: Build LLVM test suite LSX
        env: 
          BUILD_DIR: build-test-suite-lsx
          FLAG: "-mlsx"
        run: |
          cd ${WORKSPACE}
          sh scripts/build-test-suite.sh 2>&1 | tee -a ${LOG_FILE}
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Build LLVM test suite LSX failed! Check logs."
            exit 1
          fi

      - name: Run LLVM test suite LSX
        run: |
          cd ${BUILDS_DIR}/build-test-suite-lsx
          ${BUILDS_DIR}/build-llvm/bin/llvm-lit . -v 2>&1 | tee -a ${LOG_FILE}
          
      - name: Build LLVM test suite LASX
        env: 
          BUILD_DIR: build-test-suite-lasx
          FLAG: "-mlasx"
        run: |
          cd ${WORKSPACE}
          sh scripts/build-test-suite.sh 2>&1 | tee -a ${LOG_FILE}
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "Build LLVM test suite LASX failed! Check logs."
            exit 1
          fi

      - name: Run LLVM test suite LASX
        run: |
          cd ${BUILDS_DIR}/build-test-suite-lasx
          ${BUILDS_DIR}/build-llvm/bin/llvm-lit . -v 2>&1 | tee -a ${LOG_FILE}
  
  results:
    needs: test-suite
    runs-on: self-hosted
    steps:
      - name: Check failed tests
        id: check
        run: |
          if rg -U '(?s)Failed Tests.*?\nTesting Time' -A1 ${LOG_FILE}; then
            rg -U '(?s)Failed Tests.*?\nTesting Time' -A1 ${LOG_FILE} > ${FAILED_TESTS}
            echo "See full log in ${LOG_FILE}"
            echo "See full failed tests in ${FAILED_TESTS}"
            echo "FAILED=true" >> $GITHUB_OUTPUT
            echo "TITLE=$(date +'%Y %m %d') LLVM Test CI Failed" >> $GITHUB_OUTPUT

            echo "BODY<<EOF" >> $GITHUB_OUTPUT
            echo ">[!WARNING]" >> $GITHUB_OUTPUT
            echo ">Maximum of 100 lines displayed" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            head -n100 ${FAILED_TESTS} >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: create an issue
        id: issue
        if: steps.check.outputs.FAILED == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ steps.check.outputs.TITLE }}
          body: ${{ steps.check.outputs.BODY }}
          labels: 'ci failed'